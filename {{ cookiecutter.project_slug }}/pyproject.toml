{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
description = "Top-level package for {{ cookiecutter.project_name }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.rst"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: {{ cookiecutter.python_version }}',
]
packages = [
    { include = "{{ cookiecutter.project_slug}}", from = "src" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
[tool.poetry.group.dev.dependencies]
coverage = "*"
hypothesis = "*"
{% if cookiecutter.mypy == "y" -%}
mypy = "*"{% endif %}
nox = "*"
nox_poetry = "*"
pre-commit="*"
pydocstyle = "*"
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
safety = "*"
sphinx = "*"
toml = "*"
ruff = "*"
typeguard = "*"

[tool.pytest.ini_options]
pythonpath = ["src"]

{% if cookiecutter.mypy == "y" -%}
[tool.mypy]
warn_return_any = true
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
exclude = [
    '^docs/',  # Exclude docs directory
    '^tests/',  # Exclude test directory
]

{% endif %}

[tool.ruff]
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}"

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "C",
    "B",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "A",
    "COM",
    "C4",
    "EM",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TCH",
    "TID",
    "ARG",
    "PTH",
    "TD",
    "FIX",
    "ERA",
    "PD",
    "PL",
    "TRY",
    "FLY",
    "PERF",
    "LOG",
    "RUF",
]
ignore = ["COM812", "ISC001"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101", "ANN", "PLR2004"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pydoclint]
style = "numpy"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.masonry.api"
