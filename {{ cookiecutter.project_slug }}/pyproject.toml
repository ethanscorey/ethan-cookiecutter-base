{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
description = "Top-level package for {{ cookiecutter.project_name }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.rst"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: {{ cookiecutter.python_version }}',
]
packages = [
    { include = "{{ cookiecutter.project_slug}}", from = "src" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
black="*"
coverage = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-comprehensions = "*"
flake8-simplify = "*"
isort = "*"
{% if cookiecutter.mypy == "y" -%}
mypy = "*"{% endif %}
pre-commit="*"
pydocstyle = "*"
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
safety = "*"
sphinx = "*"
toml = "*"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
pythonpath = ["src"]

{% if cookiecutter.mypy == "y" -%}
[tool.mypy]
warn_return_any = true
exclude = [
    '^docs/',  # Exclude docs directory
    '^tests/',  # Exclude test directory
]

{% endif %}
[tool.pydocstyle]
match = "^src""

[build-system]
requires = ["poetry>=1.2.2"]
build-backend = "poetry.masonry.api"
